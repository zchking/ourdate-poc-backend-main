"""
Django settings for ourdate project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

import socket
import requests
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SITE_ID = 0
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wvnj_4am&r6p4$9-9h_*hgec)$bg5-e@bsrlgi)ar!e$kz6@*l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Begin ALLOWED_HOSTS
hostname = socket.gethostname()
local_ip = socket.gethostbyname(hostname)

ALLOWED_HOSTS = [
    'app.ourdate-app.com',
    'eb-django-app-dev.elasticbeanstalk.com',
    'localhost',
    '127.0.0.1',
    '127.0.0.1:8000',
    local_ip,
]

try:
    internal_ip = requests.get(
        'http://instance-data/latest/meta-data/local-ipv4').text
except requests.exceptions.ConnectionError:
    pass
else:
    ALLOWED_HOSTS.append(internal_ip)
del requests

# end ALLOWED_HOSTS

# Application definition

INSTALLED_APPS = [
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.apple',
    'allauth.socialaccount.providers.google',
    'author',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'django_mysql',
    'easy_maps',
    'jquery',
    'jquery_ui',
    'location_field.apps.DefaultConfig',
    'material',
    'ourdate.theme',
    'ourdate_events',
    'phonenumber_field',
    'storages',
    'users',
]

AUTH_USER_MODEL = 'users.CustomUser'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'author.middlewares.AuthorDefaultBackendMiddleware',
]

ROOT_URLCONF = 'ourdate.urls'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

# Email
ACCOUNT_EMAIL_REQUIRED = True
# for dev close verify mail
# @TODO change back to mandatory after dev
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_SIGNUP_REDIRECT_URL = "/accounts/profile/edit/"
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_ADAPTER = "users.adapter.AccountAdapter"
# Social accounts
SOCIALACCOUNT_AUTO_SIGNUP = True

DEFAULT_FROM_EMAIL = '"OurDate (DO NOT REPLY)" <donot-reply@mail.ourdate-app.com>'
if os.uname().sysname == 'Darwin':
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
else:
    EMAIL_BACKEND = 'django_ses.SESBackend'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ourdate.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

mysql_user = os.getenv('MYSQL_USER')
mysql_password = os.getenv('MYSQL_PASSWORD')
mysql_host = os.getenv('MYSQL_HOST')
mysql_database = os.getenv('MYSQL_DATABASE')

if os.uname().sysname == 'Darwin':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'NAME': mysql_database,
            'ENGINE': 'django.db.backends.mysql',
            'HOST': mysql_host,
            'PORT': 3306,
            'USER': mysql_user,
            'PASSWORD': mysql_password,
            'OPTIONS': {
                'charset': 'utf8mb4',
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

apple_client_id = os.getenv('APPLE_CLIENT_ID')  # Your service identifier.
# The Key ID (visible in the "View Key Details" page).
apple_key_id = os.getenv('APPLE_KEY_ID')
# Member ID/App ID Prefix -- you can find it below your name
# at the top right corner of the page, or itâ€™s your App ID
# Prefix in your App ID.
apple_key = os.getenv('APPLE_KEY')
# The certificate you downloaded when generating the key.
apple_certificate_key = os.getenv('APPLE_CERTIFICATE_KEY')


SOCIALACCOUNT_PROVIDERS = {
    "apple": {
        "APP": {
            "client_id": apple_client_id,
            "secret": apple_key_id,
            "key": apple_key,
            "certificate_key": apple_certificate_key,
        }
    },

    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    },
}

# Athentication via django-allauth

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Los_Angeles'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]


STATICFILES_DIR = [
    ('assets', BASE_DIR / 'templates/static'),
]

if os.uname().sysname == 'Darwin':
    STATIC_URL = '/static/'
    STATIC_ROOT = BASE_DIR / 'static/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URL = '/media/'

# use S3
if os.uname().sysname != 'Darwin':
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3ManifestStaticStorage'
    STATIC_ROOT = BASE_DIR / ''
    STATIC_URL = 'https://static.ourdate-app.com/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URL = 'https://static.ourdate-app.com/media'
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_CUSTOM_DOMAIN = 'static.ourdate-app.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    AWS_LOCATION = ''
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
    DEFAULT_FILE_STORAGE = 'ourdate.storage_backends.PublicMediaStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# map fields.


LOCATION_FIELD_PATH = STATIC_URL + 'location_field'

LOCATION_FIELD = {
    'map.provider': 'google',
    'map.zoom': 13,

    'search.provider': 'google',
    'search.suffix': '',

    # Google
    'provider.google.api': '//maps.google.com/maps/api/js?sensor=false',
    'provider.google.api_key': os.getenv('GOOGLE_MAP_API_KEY'),
    'provider.google.api_libraries': '',
    'provider.google.map.type': 'ROADMAP',

    # Mapbox
    'provider.mapbox.access_token': '',
    'provider.mapbox.max_zoom': 18,
    'provider.mapbox.id': 'mapbox.streets',

    # OpenStreetMap
    'provider.openstreetmap.max_zoom': 18,

    # misc
    'resources.root_path': LOCATION_FIELD_PATH,
    'resources.media': {
        'js': (
            LOCATION_FIELD_PATH + '/js/form.js',
        ),
    },
}

EASY_MAPS_GOOGLE_KEY = os.getenv('GOOGLE_MAP_API_KEY')
EASY_MAPS_ZOOM = 13
EASY_MAPS_LANGUAGE = 'en'
